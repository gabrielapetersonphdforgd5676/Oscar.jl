###
# Computing (tropical) Groebner bases in Oscar
# ============================================
#
# For a definition of tropical Groebner basis see Section 2.4 in:
#   D. Maclagan, B. Sturmfels: Introduction to tropical geometry
# To see how they can be computed using standard bases see:
#   T. Markwig, Y. Ren: Computing tropical varieties over fields with valuation
###



#=======
return true if f is homogeneous (w.r.t. total degree)
return false otherwise
=======#
function is_homogeneous(f::Union{AbstractAlgebra.Generic.MPoly{K},fmpq_mpoly,fmpz_mpoly} where {K})
  leadexpv,tailexpvs = Iterators.peel(exponent_vectors(f))
  d = sum(leadexpv)
  for tailexpv in tailexpvs
    if d!=sum(tailexpv)
      return false
    end
  end
  return true
end
export is_homogeneous

function is_homogeneous(I::MPolyIdeal{K} where {K})
  # todo: test whether generators are interreduced
  @warn "is_homogeneous: merely checking whether given generators are homogeneous, can result in false negative"

  for f in gens(I)
    if !is_homogeneous(f)
      return false
    end
  end
  return true
end



#=======
tropical Groebner basis
todo: proper documentation
Example:

val_2 = ValuationMap(QQ,2)
Kx,(x,y,z) = PolynomialRing(QQ,3)
w = [0,0,0]
I = ideal([x+2*y,y+2*z])
groebner_basis(I,val_2,w)

Kt,t = RationalFunctionField(QQ,"t")
val_t = ValuationMap(Kt,t)
Ktx,(x,y,z) = PolynomialRing(Kt,3)
w = [0,0,0]
I = ideal([x+t*y,y+t*z])
groebner_basis(I,val_t,w,return_lead=true)
=======#
@doc Markdown.doc"""
    groebner_basis(I::Ideal, val::ValuationMap, w::Vector; complete_reduction::Bool, return_lead)

Computes a Groebner basis of `I` over a field with valuation `val` with respect to weight vector `w`, that is a finite generating set of `I` whose initial forms generate the initial ideal with respect to `w`.

For the definitions of initial form, initial ideal and Groebner basis see [Maclagan-Sturmfels, Section 2.4].

# Warning
`I` must be homogeneous if `val` is non-trivial or `w` contains non-positive entries. If `val` is trivla and `w` contains only non-negative entries, then what is computed is a regular Groebner basis with respect to a weighted ordering with weight vector `w`.

# Examples
```jldoctest
julia> Kx,(x0,x1,x2,x3,x4,x5) = PolynomialRing(QQ,6);

julia> Cyclic5Homogenized = ideal([x1+x2+x3+x4+x5,
                                   x1*x2+x2*x3+x3*x4+x1*x5+x4*x5,
                                   x1*x2*x3+x2*x3*x4+x1*x2*x5+x1*x4*x5+x3*x4*x5,
                                   x1*x2*x3*x4+x1*x2*x3*x5+x1*x2*x4*x5+x1*x3*x4*x5+x2*x3*x4*x5,
                                   -x0^5+x1*x2*x3*x4*x5]);

julia> Katsura5Homogenized = ideal([-x0+x1+2*x2+2*x3+2*x4+2*x5,
                                    -x0*x1+x1^2+2*x2^2+2*x3^2+2*x4^2+2*x5^2,
                                    -x0*x2+2*x1*x2+2*x2*x3+2*x3*x4+2*x4*x5,
                                    x2^2-x0*x3+2*x1*x3+2*x2*x4+2*x3*x5,
                                    2*x2*x3-x0*x4+2*x1*x4+2*x2*x5]);

julia> val_2 = ValuationMap(QQ,2); # 2-adic valuation

julia> val_3 = ValuationMap(QQ,3); # 3-adic valuation

julia> w = [0,0,0,0,0,0];

julia> groebner_basis(Cyclic5Homogenized, val_2, w, complete_reduction=true)
12-element Vector{fmpq_mpoly}:
 x3*x4*x5^2 + x3*x4*x5*x6 - x3*x4*x6^2 - x3*x5^2*x6 - x3*x5*x6^2 + x3*x6^3 + x4^2*x5*x6 + x4*x5^2*x6 + x4*x6^3 - x5^3*x6 - 2*x5^2*x6^2 - x5*x6^3 + x6^4
 x3*x4^2 - x3*x4*x5 + x3*x5*x6 - x3*x6^2 + x4^2*x5 - x4^2*x6 + x4*x5*x6 - 2*x4*x6^2 + x5^2*x6 + x5*x6^2 - x6^3
 -2*x3*x4*x5*x6^2 + 3*x3*x4*x6^3 - x3*x5^3*x6 - x3*x5^2*x6^2 + 2*x3*x5*x6^3 - x3*x6^4 + x4^2*x5^3 - x4^2*x5*x6^2 + x4^2*x6^3 - 2*x4*x5^2*x6^2 + 4*x4*x5*x6^3 - x5^4*x6 - 3*x5^3*x6^2 - x5^2*x6^3 + 3*x5*x6^4 - x6^5
 -11*x3*x4*x5*x6^4 - 6*x3*x4*x6^5 - 19*x3*x5^3*x6^3 + 16*x3*x5^2*x6^4 + 46*x3*x5*x6^5 - 26*x3*x6^6 - 6*x4^3*x6^4 - x4^2*x5*x6^4 - 28*x4^2*x6^5 + 16*x4*x5^3*x6^3 - 9*x4*x5^2*x6^4 + 19*x4*x5*x6^5 - 48*x4*x6^6 + x5^5*x6^2 - 9*x5^4*x6^3 + 7*x5^3*x6^4 + 48*x5^2*x6^5 + 36*x5*x6^6 - 26*x6^7
 -x3*x4*x5*x6 - x3*x4*x6^2 + x3*x5^2*x6 + 4*x3*x5*x6^2 - 3*x3*x6^3 + x4^3*x5 - x4^3*x6 - x4^2*x5^2 + 3*x4^2*x5*x6 - 4*x4^2*x6^2 + 2*x4*x5*x6^2 - 6*x4*x6^3 + x5^3*x6 + 5*x5^2*x6^2 + 3*x5*x6^3 - 3*x6^4
 -4*x3*x4*x5*x6^3 + 21*x3*x4*x6^4 - 3*x3*x5^3*x6^2 - 15*x3*x5^2*x6^3 - 12*x3*x5*x6^4 + 13*x3*x6^5 + x4^4*x6^2 + 9*x4^3*x6^3 - 3*x4^2*x5*x6^3 + 32*x4^2*x6^4 - 16*x4*x5^3*x6^2 - 16*x4*x5^2*x6^3 + 14*x4*x5*x6^4 + 37*x4*x6^5 - 4*x5^4*x6^2 - 28*x5^3*x6^3 - 37*x5^2*x6^4 - 2*x5*x6^5 + 13*x6^6
 x3^2 + x3*x5 + 2*x3*x6 - x4*x5 + x4*x6 + x6^2
 2*x3*x4*x6^4 + 4*x3*x5^3*x6^2 - 2*x3*x5^2*x6^3 - 8*x3*x5*x6^4 + 4*x3*x6^5 + x4^3*x6^3 - x4^2*x5*x6^3 + 5*x4^2*x6^4 + x4*x5^4*x6 - 3*x4*x5^3*x6^2 - 4*x4*x5*x6^4 + 8*x4*x6^5 + 3*x5^4*x6^2 - 8*x5^2*x6^4 - 6*x5*x6^5 + 4*x6^6
 -x3*x4*x5*x6^2 + 4*x3*x4*x6^3 - x3*x5^3*x6 - 2*x3*x5^2*x6^2 - 2*x3*x5*x6^3 + 2*x3*x6^4 + x4^3*x6^2 + x4^2*x5^2*x6 - x4^2*x5*x6^2 + 5*x4^2*x6^3 - 3*x4*x5^3*x6 - 2*x4*x5^2*x6^2 + 3*x4*x5*x6^3 + 6*x4*x6^4 - x5^4*x6 - 5*x5^3*x6^2 - 6*x5^2*x6^3 + 2*x6^5
 x1^5 - 2*x3*x4*x5*x6^2 + x3*x4*x6^3 + 2*x3*x5*x6^3 - x3*x6^4 - x4^2*x5*x6^2 - 2*x4*x5^2*x6^2 + x4*x5*x6^3 - x4*x6^4 + x5^2*x6^3 + 2*x5*x6^4 - x6^5
 -8*x3*x4*x5*x6^3 - 3*x3*x4*x6^4 + x3*x5^4*x6 - 11*x3*x5^3*x6^2 + 9*x3*x5^2*x6^3 + 29*x3*x5*x6^4 - 17*x3*x6^5 - 4*x4^3*x6^3 - x4^2*x5*x6^3 - 18*x4^2*x6^4 + 11*x4*x5^3*x6^2 - 6*x4*x5^2*x6^3 + 12*x4*x5*x6^4 - 31*x4*x6^5 + x5^5*x6 - 5*x5^4*x6^2 + 5*x5^3*x6^3 + 30*x5^2*x6^4 + 23*x5*x6^5 - 17*x6^6
 x2 + x3 + x4 + x5 + x6

julia> groebner_basis(Cyclic5Homogenized, val_3, w, complete_reduction=true) # same as for val_2
12-element Vector{fmpq_mpoly}:
 -2*x3*x4*x5*x6^2 + 3*x3*x4*x6^3 - x3*x5^3*x6 - x3*x5^2*x6^2 + 2*x3*x5*x6^3 - x3*x6^4 + x4^2*x5^3 - x4^2*x5*x6^2 + x4^2*x6^3 - 2*x4*x5^2*x6^2 + 4*x4*x5*x6^3 - x5^4*x6 - 3*x5^3*x6^2 - x5^2*x6^3 + 3*x5*x6^4 - x6^5
 -11*x3*x4*x5*x6^4 - 6*x3*x4*x6^5 - 19*x3*x5^3*x6^3 + 16*x3*x5^2*x6^4 + 46*x3*x5*x6^5 - 26*x3*x6^6 - 6*x4^3*x6^4 - x4^2*x5*x6^4 - 28*x4^2*x6^5 + 16*x4*x5^3*x6^3 - 9*x4*x5^2*x6^4 + 19*x4*x5*x6^5 - 48*x4*x6^6 + x5^5*x6^2 - 9*x5^4*x6^3 + 7*x5^3*x6^4 + 48*x5^2*x6^5 + 36*x5*x6^6 - 26*x6^7
 -x3*x4*x5*x6^2 + 4*x3*x4*x6^3 - x3*x5^3*x6 - 2*x3*x5^2*x6^2 - 2*x3*x5*x6^3 + 2*x3*x6^4 + x4^3*x6^2 + x4^2*x5^2*x6 - x4^2*x5*x6^2 + 5*x4^2*x6^3 - 3*x4*x5^3*x6 - 2*x4*x5^2*x6^2 + 3*x4*x5*x6^3 + 6*x4*x6^4 - x5^4*x6 - 5*x5^3*x6^2 - 6*x5^2*x6^3 + 2*x6^5
 2*x3*x4*x6^4 + 4*x3*x5^3*x6^2 - 2*x3*x5^2*x6^3 - 8*x3*x5*x6^4 + 4*x3*x6^5 + x4^3*x6^3 - x4^2*x5*x6^3 + 5*x4^2*x6^4 + x4*x5^4*x6 - 3*x4*x5^3*x6^2 - 4*x4*x5*x6^4 + 8*x4*x6^5 + 3*x5^4*x6^2 - 8*x5^2*x6^4 - 6*x5*x6^5 + 4*x6^6
 -x3*x4*x5*x6 - x3*x4*x6^2 + x3*x5^2*x6 + 4*x3*x5*x6^2 - 3*x3*x6^3 + x4^3*x5 - x4^3*x6 - x4^2*x5^2 + 3*x4^2*x5*x6 - 4*x4^2*x6^2 + 2*x4*x5*x6^2 - 6*x4*x6^3 + x5^3*x6 + 5*x5^2*x6^2 + 3*x5*x6^3 - 3*x6^4
 -4*x3*x4*x5*x6^3 + 21*x3*x4*x6^4 - 3*x3*x5^3*x6^2 - 15*x3*x5^2*x6^3 - 12*x3*x5*x6^4 + 13*x3*x6^5 + x4^4*x6^2 + 9*x4^3*x6^3 - 3*x4^2*x5*x6^3 + 32*x4^2*x6^4 - 16*x4*x5^3*x6^2 - 16*x4*x5^2*x6^3 + 14*x4*x5*x6^4 + 37*x4*x6^5 - 4*x5^4*x6^2 - 28*x5^3*x6^3 - 37*x5^2*x6^4 - 2*x5*x6^5 + 13*x6^6
 -8*x3*x4*x5*x6^3 - 3*x3*x4*x6^4 + x3*x5^4*x6 - 11*x3*x5^3*x6^2 + 9*x3*x5^2*x6^3 + 29*x3*x5*x6^4 - 17*x3*x6^5 - 4*x4^3*x6^3 - x4^2*x5*x6^3 - 18*x4^2*x6^4 + 11*x4*x5^3*x6^2 - 6*x4*x5^2*x6^3 + 12*x4*x5*x6^4 - 31*x4*x6^5 + x5^5*x6 - 5*x5^4*x6^2 + 5*x5^3*x6^3 + 30*x5^2*x6^4 + 23*x5*x6^5 - 17*x6^6
 x3*x4*x5^2 + x3*x4*x5*x6 - x3*x4*x6^2 - x3*x5^2*x6 - x3*x5*x6^2 + x3*x6^3 + x4^2*x5*x6 + x4*x5^2*x6 + x4*x6^3 - x5^3*x6 - 2*x5^2*x6^2 - x5*x6^3 + x6^4
 x3*x4^2 - x3*x4*x5 + x3*x5*x6 - x3*x6^2 + x4^2*x5 - x4^2*x6 + x4*x5*x6 - 2*x4*x6^2 + x5^2*x6 + x5*x6^2 - x6^3
 x3^2 + x3*x5 + 2*x3*x6 - x4*x5 + x4*x6 + x6^2
 x2 + x3 + x4 + x5 + x6
 x1^5 - 2*x3*x4*x5*x6^2 + x3*x4*x6^3 + 2*x3*x5*x6^3 - x3*x6^4 - x4^2*x5*x6^2 - 2*x4*x5^2*x6^2 + x4*x5*x6^3 - x4*x6^4 + x5^2*x6^3 + 2*x5*x6^4 - x6^5

julia> groebner_basis(Katsura5Homogenized, val_2, w, complete_reduction=true)
15-element Vector{fmpq_mpoly}:
 x2^4*x6 - 311*x2^3*x6^2 - 3480*x2^2*x6^3 - 1234*x2*x4*x6^3 - 5*x2*x5^2*x6^2 - 1162*x2*x5*x6^3 - 7542*x2*x6^4 + 8586*x3*x5^2*x6^2 - 39118*x3*x5*x6^3 - 6120*x3*x6^4 - 1660*x4*x5^2*x6^2 + 2232*x4*x5*x6^3 - 5060*x4*x6^4 + 1172*x5^4*x6 - 3110*x5^3*x6^2 + 1416*x5^2*x6^3 + 2176*x5*x6^4 + 11332*x6^5
 10*x2^2*x6 - 6*x2*x4*x6 + 37*x2*x5^2 - 2*x2*x5*x6 + 18*x2*x6^2 - 98*x3*x5^2 + 118*x3*x5*x6 + 24*x3*x6^2 - 124*x4*x5^2 + 24*x4*x5*x6 + 20*x4*x6^2 - 74*x5^3 - 112*x5^2*x6 + 8*x5*x6^2 - 28*x6^3
 -1957*x2^3*x6 - 20993*x2^2*x6^2 - 8830*x2*x4*x6^2 + 8*x2*x5^2*x6 - 7894*x2*x5*x6^2 - 47370*x2*x6^3 + 52136*x3*x5^2*x6 - 241980*x3*x5*x6^2 - 37832*x3*x6^3 - 9540*x4*x5^2*x6 + 12936*x4*x5*x6^2 - 30244*x4*x6^3 + 7194*x5^4 - 18880*x5^3*x6 + 9076*x5^2*x6^2 + 13928*x5*x6^3 + 70320*x6^4
 1957*x2^3*x5*x6 + 2016*x2^3*x6^2 + 20993*x2^2*x5*x6^2 + 25242*x2^2*x6^3 + 8830*x2*x4*x5*x6^2 + 19082*x2*x4*x6^3 - 8*x2*x5^3*x6 + 7891*x2*x5^2*x6^2 + 71922*x2*x5*x6^3 + 79618*x2*x6^4 - 52136*x3*x5^3*x6 + 237110*x3*x5^2*x6^2 + 376690*x3*x5*x6^3 + 40856*x3*x6^4 + 9540*x4*x5^3*x6 + 14892*x4*x5^2*x6^2 + 22220*x4*x5*x6^3 + 38388*x4*x6^4 + 18528*x5^4*x6 + 57614*x5^3*x6^2 + 34908*x5^2*x6^3 - 102196*x5*x6^4 - 106876*x6^5
 8882351160*x2^3*x6 + 95295775448*x2^2*x6^2 + 40069075092*x2*x4*x6^2 + x2*x5^3 + 14046703*x2*x5^2*x6 + 35826240740*x2*x5*x6^2 + 215025506808*x2*x6^3 - 236766111212*x3*x5^2*x6 + 1098449475000*x3*x5*x6^2 + 171742990416*x3*x6^3 + 43130996630*x4*x5^2*x6 - 58680721228*x4*x5*x6^2 + 137297443936*x4*x6^3 - 32651831500*x5^4 + 85591054414*x5^3*x6 - 41346207054*x5^2*x6^2 - 63204945956*x5*x6^3 - 319203633416*x6^4
 8220*x2^3*x6 + 88190*x2^2*x6^2 + 37082*x2*x4*x6^2 + 13*x2*x5^2*x6 + 33156*x2*x5*x6^2 + 198994*x2*x6^3 - 219108*x3*x5^2*x6 + 1016546*x3*x5*x6^2 + 158936*x3*x6^3 + 2*x4*x5^3 + 39916*x4*x5^2*x6 - 54304*x4*x5*x6^2 + 127060*x4*x6^3 - 30216*x5^4 + 79212*x5^3*x6 - 38260*x5^2*x6^2 - 58492*x5*x6^3 - 295404*x6^4
 -2*x2^2*x6 + x2*x4*x5 + 2*x2*x4*x6 - 6*x2*x5^2 + 3*x2*x5*x6 - 2*x2*x6^2 + 22*x3*x5^2 - 18*x3*x5*x6 - 4*x3*x6^2 + 24*x4*x5^2 - 4*x4*x5*x6 - 4*x4*x6^2 + 14*x5^3 + 20*x5^2*x6 - 4*x5*x6^2 + 4*x6^3
 x1 - x2 - 2*x3 - 2*x4 - 2*x5 - 2*x6
 x2*x6 + 2*x3*x5 + x4^2 + 2*x4*x5 + x5^2 - x6^2
 x2*x4 + x2*x5 + 2*x2*x6 + x3^2 + 4*x3*x5 + 2*x3*x6 - 2*x5*x6 - 2*x6^2
 x2^2*x4 + 2*x2^2*x6 + 2*x2*x4*x6 + 9*x2*x5^2 - 6*x2*x5*x6 + 2*x2*x6^2 - 34*x3*x5^2 + 16*x3*x5*x6 + 8*x3*x6^2 - 50*x4*x5^2 + 8*x4*x5*x6 - 26*x5^3 - 38*x5^2*x6 + 8*x5*x6^2 - 4*x6^3
 x2^2*x5 + 4*x2^2*x6 - 4*x2*x4*x6 + 10*x2*x5^2 + 2*x2*x5*x6 + 4*x2*x6^2 - 16*x3*x5^2 + 40*x3*x5*x6 + 8*x3*x6^2 - 24*x4*x5^2 + 4*x4*x5*x6 + 8*x4*x6^2 - 16*x5^3 - 28*x5^2*x6 - 4*x5*x6^2 - 8*x6^3
 x2*x5 + 2*x3*x4 - 2*x3*x5 + 2*x3*x6 - 2*x4*x5 - 2*x5^2 - 2*x5*x6
 x2*x3 + 2*x2*x4 + 2*x2*x5 + 4*x2*x6 + 6*x3*x5 + 2*x3*x6 + 2*x4*x5 - 2*x5*x6 - 4*x6^2
 54153360*x2^3*x6 + 580993291*x2^2*x6^2 + 244290617*x2*x4*x6^2 + 85639*x2*x5^2*x6 + 218423171*x2*x5*x6^2 + 1310953987*x2*x6^3 + x3*x5^3 - 1443500738*x3*x5^2*x6 + 6696957681*x3*x5*x6^2 + 1047071864*x3*x6^3 + 262958349*x4*x5^2*x6 - 357760932*x4*x5*x6^2 + 837066422*x4*x6^3 - 199069633*x5^4 + 521826158*x5^3*x6 - 252076955*x5^2*x6^2 - 385343940*x5*x6^3 - 1946100638*x6^4

julia> groebner_basis(Katsura5Homogenized, val_3, w, complete_reduction=true) # different to val_2
15-element Vector{fmpq_mpoly}:
 8882351160*x2^3*x6 + 95295775448*x2^2*x6^2 + 40069075092*x2*x4*x6^2 + x2*x5^3 + 14046703*x2*x5^2*x6 + 35826240740*x2*x5*x6^2 + 215025506808*x2*x6^3 - 236766111212*x3*x5^2*x6 + 1098449475000*x3*x5*x6^2 + 171742990416*x3*x6^3 + 43130996630*x4*x5^2*x6 - 58680721228*x4*x5*x6^2 + 137297443936*x4*x6^3 - 32651831500*x5^4 + 85591054414*x5^3*x6 - 41346207054*x5^2*x6^2 - 63204945956*x5*x6^3 - 319203633416*x6^4
 2016*x2^3*x6^2 + 25242*x2^2*x6^3 + 19082*x2*x4*x6^3 - 3*x2*x5^2*x6^2 + 24552*x2*x5*x6^3 + 79618*x2*x6^4 - 4870*x3*x5^2*x6^2 + 338858*x3*x5*x6^3 + 40856*x3*x6^4 + 27828*x4*x5^2*x6^2 - 8024*x4*x5*x6^3 + 38388*x4*x6^4 + 7194*x5^5 - 352*x5^4*x6 + 66690*x5^3*x6^2 + 48836*x5^2*x6^3 - 31876*x5*x6^4 - 106876*x6^5
 x2^2*x5 + 4*x2^2*x6 - 4*x2*x4*x6 + 10*x2*x5^2 + 2*x2*x5*x6 + 4*x2*x6^2 - 16*x3*x5^2 + 40*x3*x5*x6 + 8*x3*x6^2 - 24*x4*x5^2 + 4*x4*x5*x6 + 8*x4*x6^2 - 16*x5^3 - 28*x5^2*x6 - 4*x5*x6^2 - 8*x6^3
 -1957*x2^3*x6 - 20993*x2^2*x6^2 - 8830*x2*x4*x6^2 + 8*x2*x5^2*x6 - 7894*x2*x5*x6^2 - 47370*x2*x6^3 + 52136*x3*x5^2*x6 - 241980*x3*x5*x6^2 - 37832*x3*x6^3 - 9540*x4*x5^2*x6 + 12936*x4*x5*x6^2 - 30244*x4*x6^3 + 7194*x5^4 - 18880*x5^3*x6 + 9076*x5^2*x6^2 + 13928*x5*x6^3 + 70320*x6^4
 x2*x6 + 2*x3*x5 + x4^2 + 2*x4*x5 + x5^2 - x6^2
 x2*x3 + 2*x2*x4 + 2*x2*x5 + 4*x2*x6 + 6*x3*x5 + 2*x3*x6 + 2*x4*x5 - 2*x5*x6 - 4*x6^2
 -2*x2^2*x6 + x2*x4*x5 + 2*x2*x4*x6 - 6*x2*x5^2 + 3*x2*x5*x6 - 2*x2*x6^2 + 22*x3*x5^2 - 18*x3*x5*x6 - 4*x3*x6^2 + 24*x4*x5^2 - 4*x4*x5*x6 - 4*x4*x6^2 + 14*x5^3 + 20*x5^2*x6 - 4*x5*x6^2 + 4*x6^3
 x2^4*x6 - 311*x2^3*x6^2 - 3480*x2^2*x6^3 - 1234*x2*x4*x6^3 - 5*x2*x5^2*x6^2 - 1162*x2*x5*x6^3 - 7542*x2*x6^4 + 8586*x3*x5^2*x6^2 - 39118*x3*x5*x6^3 - 6120*x3*x6^4 - 1660*x4*x5^2*x6^2 + 2232*x4*x5*x6^3 - 5060*x4*x6^4 + 1172*x5^4*x6 - 3110*x5^3*x6^2 + 1416*x5^2*x6^3 + 2176*x5*x6^4 + 11332*x6^5
 x2*x5 + 2*x3*x4 - 2*x3*x5 + 2*x3*x6 - 2*x4*x5 - 2*x5^2 - 2*x5*x6
 x2*x4 + x2*x5 + 2*x2*x6 + x3^2 + 4*x3*x5 + 2*x3*x6 - 2*x5*x6 - 2*x6^2
 10*x2^2*x6 - 6*x2*x4*x6 + 37*x2*x5^2 - 2*x2*x5*x6 + 18*x2*x6^2 - 98*x3*x5^2 + 118*x3*x5*x6 + 24*x3*x6^2 - 124*x4*x5^2 + 24*x4*x5*x6 + 20*x4*x6^2 - 74*x5^3 - 112*x5^2*x6 + 8*x5*x6^2 - 28*x6^3
 8220*x2^3*x6 + 88190*x2^2*x6^2 + 37082*x2*x4*x6^2 + 13*x2*x5^2*x6 + 33156*x2*x5*x6^2 + 198994*x2*x6^3 - 219108*x3*x5^2*x6 + 1016546*x3*x5*x6^2 + 158936*x3*x6^3 + 2*x4*x5^3 + 39916*x4*x5^2*x6 - 54304*x4*x5*x6^2 + 127060*x4*x6^3 - 30216*x5^4 + 79212*x5^3*x6 - 38260*x5^2*x6^2 - 58492*x5*x6^3 - 295404*x6^4
 x2^2*x4 + 2*x2^2*x6 + 2*x2*x4*x6 + 9*x2*x5^2 - 6*x2*x5*x6 + 2*x2*x6^2 - 34*x3*x5^2 + 16*x3*x5*x6 + 8*x3*x6^2 - 50*x4*x5^2 + 8*x4*x5*x6 - 26*x5^3 - 38*x5^2*x6 + 8*x5*x6^2 - 4*x6^3
 54153360*x2^3*x6 + 580993291*x2^2*x6^2 + 244290617*x2*x4*x6^2 + 85639*x2*x5^2*x6 + 218423171*x2*x5*x6^2 + 1310953987*x2*x6^3 + x3*x5^3 - 1443500738*x3*x5^2*x6 + 6696957681*x3*x5*x6^2 + 1047071864*x3*x6^3 + 262958349*x4*x5^2*x6 - 357760932*x4*x5*x6^2 + 837066422*x4*x6^3 - 199069633*x5^4 + 521826158*x5^3*x6 - 252076955*x5^2*x6^2 - 385343940*x5*x6^3 - 1946100638*x6^4
 x1 - x2 - 2*x3 - 2*x4 - 2*x5 - 2*x6

julia> Kt,t = RationalFunctionField(QQ,"t");

julia> Ktx,(x0,x1,x2,x3,x4,x5) = PolynomialRing(Kt,6);

julia> Cyclic5Homogenized_Kt = ideal([change_coefficient_ring(Kt,f) for f in gens(Cyclic5Homogenized)]);

julia> Katsura5Homogenized_Kt = ideal([change_coefficient_ring(Kt,f) for f in gens(Katsura5Homogenized)]);

julia> val_t = ValuationMap(Kt,t); # t-adic valuation

julia> groebner_basis(Cyclic5Homogenized_Kt, val_t, w, complete_reduction=true) # same leading monomials as for val_2 and val_3
12-element Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.Rat{fmpq}}}:
 11*x3*x4*x5*x6^4 + 6*x3*x4*x6^5 + 19*x3*x5^3*x6^3 - 16*x3*x5^2*x6^4 - 46*x3*x5*x6^5 + 26*x3*x6^6 + 6*x4^3*x6^4 + x4^2*x5*x6^4 + 28*x4^2*x6^5 - 16*x4*x5^3*x6^3 + 9*x4*x5^2*x6^4 - 19*x4*x5*x6^5 + 48*x4*x6^6 - x5^5*x6^2 + 9*x5^4*x6^3 - 7*x5^3*x6^4 - 48*x5^2*x6^5 - 36*x5*x6^6 + 26*x6^7
 -2*x3*x4*x6^4 - 4*x3*x5^3*x6^2 + 2*x3*x5^2*x6^3 + 8*x3*x5*x6^4 - 4*x3*x6^5 - x4^3*x6^3 + x4^2*x5*x6^3 - 5*x4^2*x6^4 - x4*x5^4*x6 + 3*x4*x5^3*x6^2 + 4*x4*x5*x6^4 - 8*x4*x6^5 - 3*x5^4*x6^2 + 8*x5^2*x6^4 + 6*x5*x6^5 - 4*x6^6
 x3*x4*x5*x6^2 - 4*x3*x4*x6^3 + x3*x5^3*x6 + 2*x3*x5^2*x6^2 + 2*x3*x5*x6^3 - 2*x3*x6^4 - x4^3*x6^2 - x4^2*x5^2*x6 + x4^2*x5*x6^2 - 5*x4^2*x6^3 + 3*x4*x5^3*x6 + 2*x4*x5^2*x6^2 - 3*x4*x5*x6^3 - 6*x4*x6^4 + x5^4*x6 + 5*x5^3*x6^2 + 6*x5^2*x6^3 - 2*x6^5
 2*x3*x4*x5*x6^2 - 3*x3*x4*x6^3 + x3*x5^3*x6 + x3*x5^2*x6^2 - 2*x3*x5*x6^3 + x3*x6^4 - x4^2*x5^3 + x4^2*x5*x6^2 - x4^2*x6^3 + 2*x4*x5^2*x6^2 - 4*x4*x5*x6^3 + x5^4*x6 + 3*x5^3*x6^2 + x5^2*x6^3 - 3*x5*x6^4 + x6^5
 -x3*x4*x5*x6 - x3*x4*x6^2 + x3*x5^2*x6 + 4*x3*x5*x6^2 - 3*x3*x6^3 + x4^3*x5 - x4^3*x6 - x4^2*x5^2 + 3*x4^2*x5*x6 - 4*x4^2*x6^2 + 2*x4*x5*x6^2 - 6*x4*x6^3 + x5^3*x6 + 5*x5^2*x6^2 + 3*x5*x6^3 - 3*x6^4
 4*x3*x4*x5*x6^3 - 21*x3*x4*x6^4 + 3*x3*x5^3*x6^2 + 15*x3*x5^2*x6^3 + 12*x3*x5*x6^4 - 13*x3*x6^5 - x4^4*x6^2 - 9*x4^3*x6^3 + 3*x4^2*x5*x6^3 - 32*x4^2*x6^4 + 16*x4*x5^3*x6^2 + 16*x4*x5^2*x6^3 - 14*x4*x5*x6^4 - 37*x4*x6^5 + 4*x5^4*x6^2 + 28*x5^3*x6^3 + 37*x5^2*x6^4 + 2*x5*x6^5 - 13*x6^6
 8*x3*x4*x5*x6^3 + 3*x3*x4*x6^4 - x3*x5^4*x6 + 11*x3*x5^3*x6^2 - 9*x3*x5^2*x6^3 - 29*x3*x5*x6^4 + 17*x3*x6^5 + 4*x4^3*x6^3 + x4^2*x5*x6^3 + 18*x4^2*x6^4 - 11*x4*x5^3*x6^2 + 6*x4*x5^2*x6^3 - 12*x4*x5*x6^4 + 31*x4*x6^5 - x5^5*x6 + 5*x5^4*x6^2 - 5*x5^3*x6^3 - 30*x5^2*x6^4 - 23*x5*x6^5 + 17*x6^6
 x3*x4*x5^2 + x3*x4*x5*x6 - x3*x4*x6^2 - x3*x5^2*x6 - x3*x5*x6^2 + x3*x6^3 + x4^2*x5*x6 + x4*x5^2*x6 + x4*x6^3 - x5^3*x6 - 2*x5^2*x6^2 - x5*x6^3 + x6^4
 -x3*x4^2 + x3*x4*x5 - x3*x5*x6 + x3*x6^2 - x4^2*x5 + x4^2*x6 - x4*x5*x6 + 2*x4*x6^2 - x5^2*x6 - x5*x6^2 + x6^3
 -x3^2 - x3*x5 - 2*x3*x6 + x4*x5 - x4*x6 - x6^2
 x2 + x3 + x4 + x5 + x6
 -x1^5 + 2*x3*x4*x5*x6^2 - x3*x4*x6^3 - 2*x3*x5*x6^3 + x3*x6^4 + x4^2*x5*x6^2 + 2*x4*x5^2*x6^2 - x4*x5*x6^3 + x4*x6^4 - x5^2*x6^3 - 2*x5*x6^4 + x6^5

julia> groebner_basis(Katsura5Homogenized_Kt, val_t, w, complete_reduction=true) # different leading monomials as for val_2, same leading monomials as for val_3
13-element Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.Rat{fmpq}}}:
 385435641777613426263048919265966712483675516854427965194240000000*x2^3*x6 + 4135045376698027032593847788439386368521610555019038881218560000000*x2^2*x6^2 + 1738833261257008894611720726225458413088737749267372121784320000000*x2*x4*x6^2 + 1554656250035953161916869359591442638089287779192337145528320000000*x2*x5*x6^2 + 9330396742388670640533153190247641819519823377066585478922240000000*x2*x6^3 - 10272478123889389879949343495728028521570478134402419009781760000000*x3*x5^2*x6 + 47663541346347460286681181691322849380438581498432326142525440000000*x3*x5*x6^2 + 7452121256104298278474197596960198515047108997276507685519360000000*x3*x6^3 + 1873644445828814024271541700542599555216947863201485873479680000000*x4*x5^2*x6 - 2546752868456702449437129706716141832102220915684963411558400000000*x4*x5*x6^2 + 5957476902730373507609402061282972462141168008911509971271680000000*x4*x6^3 - 1416874811930583029400293267858643091265999830480712714158080000000*x5^4 + 3715308097339243573339884932566783885688326494604971453972480000000*x5^3*x6 - 1792308470931191723821329883138907039552450882197250774138880000000*x5^2*x6^2 - 2742810893812018193559001543012791225881982224870041106513920000000*x5*x6^3 - 13850877760864311099390049897952994900525109448940052325335040000000*x6^4
 -2394474132558509458375199684959910415842642074908308086097306719543373856612978524160000000000*x2^3*x6 - 28913630296774407553406003842515253129469688548563208649393846070267318592904772976640000000000*x2^2*x6^2 - 18241883684890371661464853499724248303159798589133366216892929306369658313036382863360000000000*x2*x4*x6^2 - 21026623954083746949492833752981019530022278009474158926779002727565701376008991539200000000000*x2*x5*x6^2 - 82518598006609305190769323882675778925403747550515120918313182591303916842366449745920000000000*x2*x6^3 + 40901390625217874731385600287702649062706936998404917836531301711830956429102148485120000000000*x3*x5^2*x6 - 359010909518282227121457881044564393024248632811326507396640255372485872528567597793280000000000*x3*x5*x6^2 - 44303295947694293657004024230359107153507763848731965300315889917035871725387660656640000000000*x3*x6^3 - 17505941981327151467023563550408125540215413706189398751406529004466495451700983234560000000000*x4*x5^3 - 22636225138445342216584534398160893390638978244073860423679285210923879022865342791680000000000*x4*x5^2*x6 + 7615911463147533379472866499625291863177816751109153932379370416477771165562044416000000000000*x4*x5*x6^2 - 43460415798197758356560809575271043763883524647676568782203851823274394046131674808320000000000*x4*x6^3 - 52985040408870919661241461321460456701786268840501524661262963934285998327124994293760000000000*x5^3*x6 - 15557768152645318705652706456695686891069875814985984608185961556479409635930008453120000000000*x5^2*x6^2 + 18842475252087809267866807013321641785841489630334823848244297273928164412206612480000000000000*x5*x6^3 + 113826702435942222202550527410150942470716078173986637653804335381114609291884201246720000000000*x6^4
 -4*x2*x6 - 8*x3*x5 - 4*x4^2 - 8*x4*x5 - 4*x5^2 + 4*x6^2
 -191734394642487456376728879164880889932766790137735503836043924493776962663597579772599730176000000000000*x2^3*x6 + 3034989467187885503938555391453256597172128462303916781976407609199479131855526508951985192960000000000000*x2^2*x6^2 + 7151526041855198647741077534182895823126707796690323254395804172231468349940801344665213206528000000000000*x2*x4*x6^2 + 14832495478536285699989219513444079325829557696427036621995306364091194845065370994813354115072000000000000*x2*x5*x6^2 + 26667505194196340565702212188528536566626836412633900419933577888455582460729341072320577404928000000000000*x2*x6^3 - 23378597204373809511426907740883951223327530309336766349093220217088668972913915065831906082816000000000000*x3*x5^3 + 3440152436718712181110268776513996654551813850716822819170942938420639520663211179355559428096000000000000*x3*x5^2*x6 + 64634779883736053194020859200730268741778720291314627917522856675592970397648550687043374546944000000000000*x3*x5*x6^2 + 17566137850892116937858807069618038472997415495898809329916988043406043304040089763866214400000000000000*x3*x6^3 - 19630334709750449599226595488368854173959341790821878414275533308386687452697840712018133254144000000000000*x4*x5^2*x6 + 20425905093017353575342220860551855136401394738631135488827473696872547153937816377423634104320000000000000*x4*x5*x6^2 + 7220385302230695746137484057895798533940857665434246586969078765361620039692638496539568766976000000000000*x4*x6^3 + 7565384249622216922797031028743096809550526905773699202208648410534114730183985859501901217792000000000000*x5^3*x6 - 32146032267132573996281616937401010405585270357494821073748088119433059246393364267875172352000000000000*x5^2*x6^2 + 1921032835373561908324239141133428687406997358631493788319721812426884895729824216576409206784000000000000*x5*x6^3 - 29510760266741738613264038700816912273866198084800081698073941573161284629921270001499962867712000000000000*x6^4
 -x2*x5 - 2*x3*x4 + 2*x3*x5 - 2*x3*x6 + 2*x4*x5 + 2*x5^2 + 2*x5*x6
 8*x2*x4 + 8*x2*x5 + 16*x2*x6 + 8*x3^2 + 32*x3*x5 + 16*x3*x6 - 16*x5*x6 - 16*x6^2
 -163840*x2^2*x6 + 98304*x2*x4*x6 - 606208*x2*x5^2 + 32768*x2*x5*x6 - 294912*x2*x6^2 + 1605632*x3*x5^2 - 1933312*x3*x5*x6 - 393216*x3*x6^2 + 2031616*x4*x5^2 - 393216*x4*x5*x6 - 327680*x4*x6^2 + 1212416*x5^3 + 1835008*x5^2*x6 - 131072*x5*x6^2 + 458752*x6^3
 36700160*x2^2*x6 - 96993280*x2*x4*x5 - 99614720*x2*x4*x6 - 259522560*x2*x5*x6 - 89128960*x2*x6^2 - 592445440*x3*x5^2 - 110100480*x3*x5*x6 + 10485760*x3*x6^2 - 377487360*x4*x5^2 + 10485760*x4*x5*x6 + 73400320*x4*x6^2 - 193986560*x5^3 - 178257920*x5^2*x6 + 262144000*x5*x6^2 + 52428800*x6^3
 -8*x2*x3 - 16*x2*x4 - 16*x2*x5 - 32*x2*x6 - 48*x3*x5 - 16*x3*x6 - 16*x4*x5 + 16*x5*x6 + 32*x6^2
 -193986560*x2^2*x5 - 251658240*x2^2*x6 + 461373440*x2*x4*x6 - 492830720*x2*x5*x6 + 167772160*x2*x6^2 - 2034237440*x3*x5^2 - 1572864000*x3*x5*x6 - 293601280*x3*x6^2 - 1845493760*x4*x5^2 + 482344960*x4*x5*x6 - 503316480*x4*x6^2 - 775946240*x5^3 - 440401920*x5^2*x6 + 1195376640*x5*x6^2 + 83886080*x6^3
 620756992*x2^2*x4 - 268435456*x2^2*x6 + 2147483648*x2*x4*x6 - 3422552064*x2*x5*x6 - 1476395008*x2*x6^2 - 6308233216*x3*x5^2 - 7885291520*x3*x5*x6 + 1342177280*x3*x6^2 - 12314476544*x4*x5^2 + 1342177280*x4*x5*x6 - 3019898880*x4*x6^2 - 4966055936*x5^3 - 6677331968*x5^2*x6 + 3758096384*x5*x6^2 + 1744830464*x6^3
 95482741799688119048687979168406002446421435212481615421719401049985521678742341990798980994914340686281137126568238009020724492690660513291377812412758162712269135609266409319038009433797947014909681546461043437921227143043345973631850999188719779583820406362750006774714179252708018104145308183108445591981349878292807680000000000000000000000000000000000000*x2^4*x6 + 746846522250271123001066525966945476460958320740386502610529704904460009016240142316132702333031686185298802628856651760855736336350217831930195927782304950767220497738868620014215845265472682586734470478087700062806151145266760903011433934438318320431133481516811632084121054566288598654469904290174066369306443932657254400000000000000000000000000000000000000*x2^3*x6^2 - 5562106284110011049661372556180961560688922688904866808702078988961446498149157287694359947809782052283326899998660138552153431920372201787277050804141473935350198084459562282216429563450090592694356726287427999067931419053485285064264993199094860681539254400547747699079264245729862161930482579709131221073655208227823943680000000000000000000000000000000000000*x2^2*x6^3 + 19431157297148117088459592983950778635614946764166487977807864775003296037308166895670038830155272083778620539930805443056654345753852059234379113085517022289588086720855599232190879629081536575896045032286169456808393995767539156847341886292805021446738575800617393492232165504733505346829714997570896390149140112618312171520000000000000000000000000000000000000*x2*x4*x6^3 + 11811096568572344231032493102530145898904485632191337644112607978115793523190655626110137872974769331163115875624685845721131589857875206465802647916760532562983979836528629546396778720856624582207584791810153779050595006854079558314561230574938117823266976654773850938332545507467138158672244712044241715752885753824443105280000000000000000000000000000000000000*x2*x5*x6^3 + 17022741465886953341763287712224673682594127390817852603446320282695288639513424526155861375817892259773390568173958193234938112951195990514132590166918333464352092439903791413694803943569803583912398729752986446941066109205511855067610645038782911988651931316462996676998900505614451460969473229547007190565631694083110993920000000000000000000000000000000000000*x2*x6^4 + 7222742209842936341399181739309865372173662624912859922414009727790235408287771591871493659275284879392133545241118008306018339250348299282542170839206826557276021945850054429488016064425086025737352025077625790538761147493612900657064303421623714713699656488484058263298114152854982992182235004977261489365022329941010677760000000000000000000000000000000000000*x3*x5^2*x6^2 + 30928829356974087470469535612111568738948324043613373275249780875519099517108694040381741301036057402837548482561708083535242480723097976449225050514159552365305774130997758088249692799777558542436598268086139500729581082661839466172064741928314804601721738967523112053285928888495663781759789038144631749938139231494487408640000000000000000000000000000000000000*x3*x5*x6^3 + 4529094205954541156594355273090289800208913529045483398848219762796695443377332580336067773646738360503583657866270867270735339261763932343883309863844880901904988219245733894796097150046850787958698833081079091999182225025432354466234006156590494643851719586485577822119529362664859129286315919782345451117948859194036715520000000000000000000000000000000000000*x3*x6^4 - 12119570773999752214946462499152565423131754089054341312482239183028747822833492279034871369059504577774022321446927294377764541256362068036472403758697047238915641624502429480892402963583155217212030583386984034931367378667227612485758998312460944399378421571205553745573642113684995089960353795957072769666380009882192445440000000000000000000000000000000000000*x4*x5^2*x6^2 + 12282813124142392371953144253678201863203051849819748046672114722234163038671723218685920193076957781437688475804017892425841689391586332480207550479501541534544122340714813988333413358991706259536974713257638709470141013897934213102311056325906116755977270161112718767036658332083541713703449069366233280874797448031906037760000000000000000000000000000000000000*x4*x5*x6^3 - 12358878480532252789673752976437791896965266505027677708728876571650145313318515801598350755790666638344887953467140095362736649107363253114228431552943000043086568544637278367670861877743887082402191102863706721623378022115097372443115656032403158779815415873862864960322972724265383300246844106933619690235783184189635952640000000000000000000000000000000000000*x4*x6^4 - 4468496753848290021734762207754460057776146432562775983772743145718755289772802580306682586811203907079739087944951602303728851320982771244208333452964708945880605285493875529366022339740842704671069266834880791817044117973684928500775999388221388050047815381006362285356765659906549050758800277540101000047754382294216867840000000000000000000000000000000000000*x5^3*x6^2 - 7799370758882407147038387696412991601856634009865328748933038832542026790385357831022113243079569775407798671807246308499259561446451814361254602651282810257399310466900249011763383176284691453248081295020494195956346788824159277288213154150714359926779486362691327379792202135902827153900734155304176934114901900948228014080000000000000000000000000000000000000*x5^2*x6^3 - 8755470907036947097627096884027930603909829807684882577832273659468954675202882077555080905385293951833665312383409134413148724227200834958636360129370675852247745990028286716673228992273112038425500885282897249493106808430262844214135785472482770962547224027149005136995409741186741513755738723559510083634338020043008245760000000000000000000000000000000000000*x5*x6^4 - 12302964445826901534151669661179063600812584457865853912776490399688287672059249722768433111336056234361643607930722944452661141859864667072077113102971922642481383988792364160811628234818983620819686155490107191373862068440336676879988936773315089407127630803794810616778471493703585915797605862311158481453264279666237112320000000000000000000000000000000000000*x6^5
 -x1 + x2 + 2*x3 + 2*x4 + 2*x5 + 2*x6
```
"""
function groebner_basis(I::MPolyIdeal,val::ValuationMap,w::Vector{<: Union{Int,Rational{Int}} }; complete_reduction::Bool=false, return_lead::Bool=false)

  ###
  # Step 1: Compute a standard basis in the simulation ring
  ###
  vvI = simulate_valuation(I,val)
  w = simulate_valuation(w,val)
  Rtx = base_ring(vvI)
  # todo: replace with groebner_bases in OSCAR once more orderings are supported
  S,_ = Singular.PolynomialRing(singular_ring(base_ring(Rtx)), map(string, Nemo.symbols(Rtx)), ordering = Singular.ordering_a(w)*Singular.ordering_dp())
  SI = Singular.Ideal(S, [S(g) for g in gens(vvI)])
  vvGB = Singular.gens(Singular.std(SI,complete_reduction=complete_reduction))


  ###
  # Step 2: tighten simulation so that no two monomials of the standard basis elements have the same x-monomial
  ###
  vvGB = [S(tighten_simulation(Rtx(g),val)) for g in vvGB]


  ###
  # Step 3: if complete_reduction = true and val is non-trivial, eliminate tail-monomials contained in the leading ideal in the tropical sense
  #  In the simulation, these monomials corresponds to tail-monomials contained in the leading ideal up to saturation by t
  #  and elimination means eliminating them after multiplying by a sufficiently high power in t
  ###
  if complete_reduction==true && is_valuation_nontrivial(val)
    sort!(vvGB,lt=x_monomial_lt) # sort vvGB by their leading x monomial from small to large
    Singular.libSingular.set_option("OPT_INFREDTAIL", true)
    for i in 1:length(vvGB)-1
      for j in i+1:length(vvGB)
        vvGB[j] = Singular.reduce(vvGB[j],Singular.std(Singular.Ideal(S,vvGB[i])))
      end
    end
    Singular.libSingular.set_option("OPT_INFREDTAIL", false)
  end

  GB = desimulate_valuation(ideal(Rtx,vvGB),val)
  if return_lead
    vvLI = Singular.lead(vvGB)
    LI = desimulate_valuation(ideal(Rtx,Singular.gens(vvLI)),val)
    return gens(GB),gens(LI)
  end

  return gens(GB)
end


function x_monomial_lt(f::Singular.spoly,g::Singular.spoly)
  expv_f = copy(Singular.leading_exponent_vector(f))
  expv_g = copy(Singular.leading_exponent_vector(g))
  popfirst!(expv_f)
  popfirst!(expv_g)
  return expv_f<expv_g
end
export x_monomial_lt
